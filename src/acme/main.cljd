(ns acme.main
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter/foundation.dart" :refer [VoidCallback]]
            ["package:flutter_tts/flutter_tts.dart" :refer [FlutterTts]]
            [cljd.flutter :as f]))

(defn main []
  (f/run
   :watch [enabled? (atom true) :as button-state
           number (atom 0) :as counter]
   :managed [tts (doto (FlutterTts)
                   (.setLanguage "en-US")
                   (.setCompletionHandler #(reset! button-state true)))
             :dispose .stop]
   (m/MaterialApp
    .title "Welcome to Flutter"
    .theme (m/ThemeData .primarySwatch m.Colors/pink))
   .home
   (m/Scaffold
    .appBar (m/AppBar
             .title (m/Text "Welcome to ClojureDart")))
   .body
   m/Center
   (m/OutlinedButton
    .onPressed
    (when enabled?
      (fn press-callback []
        (reset! button-state false)
        ;; If I try to grab the current handler and then put it back, it gives the error below (no type hint)
        ;;
        ;; Performing hot reload...
        ;; lib/cljd-out/acme/main.dart:313:17: Error: The method 'call' isn't defined for the class 'Never?'.
        ;; Try correcting the name to the name of an existing method, or defining a method named 'call'.
        ;; return maybe_f$1();
        ;;                 ^
        ;;
        ;; If I try to assert that it's not null by hinting it as fnd/VoidCallback
        ;;   https://api.flutter.dev/flutter/dart-ui/VoidCallback.html
        ;; Error while compiling (let [old-handler (.-completionHandler tts) new-handler (fn temporary-completion-handler [] (.setCompletionHandler tts old-handler) (reset! button-state true) (swap! counter inc))] (.setCompletionHandler tts new-handler) (.speak tts "Let's get coding!"))
        ;; ⛔️ Stream closed
        ;; Faulty subform and/or expansion (let [old-handler (.-completionHandler tts) new-handler (fn temporary-completion-handler [] (.setCompletionHandler tts old-handler) (reset! button-state true) (swap! counter inc))] (.setCompletionHandler tts new-handler) (.speak tts "Let's get coding!"))
        ;;
        ;; If I try to refer VoidCallback
        ;; Unhandled exception:
        ;; TypeAliasElement type not handled, please contact cljd team @dupuchba or @cgrand
        (let [^VoidCallback old-handler (.-completionHandler tts)
              new-handler (fn temporary-completion-handler []
                            ;; reset the handler to the original one first
                            (.setCompletionHandler tts old-handler)
                            ;; in this handler, do something else!
                            (reset! button-state true)
                            (swap! counter inc))]
          (.setCompletionHandler tts new-handler)
          (.speak tts "Let's get coding!")))))
   (m/Text
    (str "Get some cheers! x" number)
    .style (m/TextStyle
            .color m.Colors/red
            .fontSize 32.0))))
